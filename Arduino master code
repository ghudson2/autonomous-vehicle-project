 
#include <MPU9250_asukiaaa.h>

//ultrasonic 
#define echoPin 2 // attach pin D2 Arduino to pin Echo of HC-SR04
#define trigPin 3 //attach pin D3 Arduino to pin Trig of HC-SR04
long duration; // variable for the duration of sound wave travel
int distance; // variable for the distance measurement

//mpu9250
#define SDA_PIN 4
#define SCL_PIN 5
MPU9250_asukiaaa mySensor;
float aX, aY, aZ, aSqrt, gX, gY, gZ, mDirection, mX, mY, mZ, delta_angle, gyroZwithoffset, current_angle, current_angle1;
long current_time, previous_time, delta_time;

void setup() {
  //ultrasonic 
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an OUTPUT
  pinMode(echoPin, INPUT); // Sets the echoPin as an INPUT
  Serial.begin(9600); // // Serial Communication is starting with 9600 of baudrate speed
  
  //mpu9250
  mySensor.beginAccel();
  mySensor.beginGyro();
  mySensor.beginMag();
}
void loop() {
//ultrasonic 
  // Clears the trigPin condition
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin HIGH (ACTIVE) for 10 microseconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  // Calculating the distance
  distance = duration * 0.034 / 2; // Speed of sound wave divided by 2 (go and back)
  // Displays the distance on the Serial Monito
  Serial.print(distance);


//mpu9250 accel
  uint8_t sensorId;
  if (mySensor.readId(&sensorId) == 0) {
//    Serial.println("sensorId: " + String(sensorId));
  } else {
    Serial.println("Cannot read sensorId");
  }

  if (mySensor.accelUpdate() == 0) {
    aX = mySensor.accelX();              
    aY = mySensor.accelY();
    aZ = mySensor.accelZ();
    Serial.println("accelZ: " + String(aZ));
//gyro
 if (mySensor.gyroUpdate() == 0) {
    gX = mySensor.gyroX();
    
    gY = mySensor.gyroY();
    gZ = mySensor.gyroZ();
    gyroZwithoffset = gZ + 0.4879;
    
    current_time = millis();
    delta_time = current_time - previous_time ;
    delta_angle = gyroZwithoffset * delta_time;
    current_angle = current_angle + delta_angle;
    previous_time = millis();
    current_angle1 = current_angle/1000;
    Serial.println(current_angle1);

 Serial.println("at " + String(millis()) + "ms");
  Serial.println(""); // Add an empty line
  delay(40);
}
}
}
imu data- forward for 1 second 
        - turn 180 degrees, send these values until angle 180 then motors stop
      //clockwise- to the left
      analogWrite(PWMa, 255);
      analogWrite(PWMb, 0);
      analogWrite(PWMc, 255);
      analogWrite(PWMd, 0);
      
sr04 data- reverse until 10 cm away 
         - send to reverse when data from sr04 = 10cm send motors stop
      analogWrite(PWMa, 0);
      analogWrite(PWMb, 255);
      analogWrite(PWMc, 255);
      analogWrite(PWMd, 0);
imu data- turn 90 degrees clockwise 
        -send clockwise until 90 degrees reached 
      analogWrite(PWMa, 255);
      analogWrite(PWMb, 0);
      analogWrite(PWMc, 255);
      analogWrite(PWMd, 0);
sr04 data- reverse unitl 10cm away
        - send reverse until 10cm then send motors stop 
      analogWrite(PWMa, 0);
      analogWrite(PWMb, 255);
      analogWrite(PWMc, 255);
      analogWrite(PWMd, 0);
